最初に、DockerHubから取ってきたIRISのイメージをHerokuにも置くための準備
https://devcenter.heroku.com/ja/articles/container-registry-and-runtime

Process-type　は　基本 webみたい
heroku.yml　に書いてる名称を書く

→　RESTアプリを動かせるようにしないとだめっぽい

画面ログ
以下の操作でDockerHubから持ってきたものにタグ付けてるだけ？もしや
c:\docker\community\HerokuTest>docker tag store/intersystems/iris-community:2021.1.0.215.0 registry.heroku.com/iijimatest1/web

名前つけたところにPushする
c:\docker\community\HerokuTest>docker push registry.heroku.com/iijimatest1/web
Using default tag: latest
The push refers to repository [registry.heroku.com/iijimatest1/web]
2092f9f07189: Pushed
961ef93c7792: Pushed
35e246a4350a: Pushed
842cc1c2541f: Pushed
6757836a0ef5: Pushed
c05477c9e54e: Pushed
fe6d8881187d: Pushed
23135df75b44: Pushed
b43408d5f11b: Pushed
latest: digest: sha256:075ff473e8ff0e8136a4044d0e0c44d51812797b626077f056360c382ca1c73c size: 2206

→これ、ローカルにある
docker images見るとローカルにある
c:\docker\community\HerokuTest>docker images
REPOSITORY                                                      TAG                 IMAGE ID       CREATED         SIZE
registry.heroku.com/iijimatest1/web                             latest              cf13bd10e84e   4 hours ago     2.67GB


アプリケーションがわからないと怒られるエラー
c:\docker\community\HerokuTest>heroku apps
=== yamamotomihoko@yahoo.co.jp Apps
hellopyiijimatest3
iijimatest1


c:\docker\community\HerokuTest>heroku container:push web
 !    Couldn't find that app.

herokuのコマンドで操作するのはどっちかを指定してそう
https://patriae.hatenablog.com/entry/2015/02/07/181907

c:\docker\community\HerokuTest>heroku git:remote -a iijimatest1
set git remote heroku to https://git.heroku.com/iijimatest1.git

heroku のコンテナレジストリにPush!　この時の末尾のweb　はheroku.ymlでかいてるDockerfile指定のやつ
c:\docker\community\HerokuTest>heroku container:push web
=== Building web (c:\docker\community\HerokuTest\Dockerfile)
[+] Building 0.3s (11/11) FINISHED
 => [internal] load build definition from Dockerfile                                                                                       0.1s
 => => transferring dockerfile: 586B                                                                                                       0.0s
 => [internal] load .dockerignore                                                                                                          0.1s
 => => transferring context: 2B                                                                                                            0.0s
 => [internal] load metadata for docker.io/store/intersystems/iris-community:2021.1.0.215.0                                                0.0s
 => [1/6] FROM docker.io/store/intersystems/iris-community:2021.1.0.215.0                                                                  0.0s
 => [internal] load build context                                                                                                          0.0s
 => => transferring context: 1.60kB                                                                                                        0.0s
 => CACHED [2/6] WORKDIR /opt/try                                                                                                          0.0s
 => CACHED [3/6] RUN chown irisowner:irisuser /opt/try                                                                                     0.0s
 => CACHED [4/6] COPY src src                                                                                                              0.0s
 => CACHED [5/6] COPY iris.script iris.script                                                                                              0.0s
 => CACHED [6/6] RUN iris start IRIS  && iris session IRIS < iris.script     && iris stop IRIS quietly                                     0.0s
 => exporting to image                                                                                                                     0.1s
 => => exporting layers                                                                                                                    0.0s
 => => writing image sha256:cf13bd10e84e11d9e2dc663e80161df62699cf346142a0f4bad63a4a7c42410c                                               0.0s
 => => naming to registry.heroku.com/iijimatest1/web                                                                                       0.0s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
603d729cfd2d: Pushed
Using default tag: latest
The push refers to repository [registry.heroku.com/iijimatest1/web]
603d729cfd2d: Pushing [==========================================>        ]  701.7MB/819MB
4e8b39cb184d: Pushed
4ea985963f82: Pushed
3949d96842c0: Pushed
97eef4a5155e: Pushed
2092f9f07189: Layer already exists
961ef93c7792: Layer already exists
35e246a4350a: Layer already exists
842cc1c2541f: Layer already exists
6757836a0ef5: Layer already exists
c05477c9e54e: Layer already exists
latest: digest: sha256:7b314ef08b63b68fc60c8cb47ac5013da2c32e78d7246169fbe4ee52d9eb87b9 size: 3247
Your image has been successfully pushed. You can now release it with the 'container:release' command.
b43408d5f11b: Layer already exists

container:releaseしろって出てくるのでやってみる
c:\docker\community\HerokuTest>heroku container:release web
Releasing images web to iijimatest1... done

ここまでデプロイはできたけど、肝心のWebアクセスはできない。CMDがないから？
c:\docker\community\HerokuTest>heroku open
